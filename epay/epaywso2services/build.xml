<?xml version="1.0" encoding="UTF-8"?>
<!--
* SPDX-FileCopyrightText: (C) Copyright 2023 Regione Piemonte
*
* SPDX-License-Identifier: EUPL-1.2
-->


<project basedir="." default="default" name="epaywsosrv" xmlns:ivy="antlib:fr.jayasoft.ivy.ant">

	<description>Build file per il progetto: [epaywsosrv]</description>
	<!-- -->
	<property file="buildfiles/build.properties" />
	<property file="buildfiles/${target}.properties" />
	<!-- -->

	<path id="library.ref">
		<fileset dir="${project.dir.lib}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
			<exclude name="geronimo-ejb_3.0_spec-1.0.1.jar" />
		</fileset>
		<pathelement location="${project.dir.build.classes}" />
	</path>
	<path id="wsimport.classpath">
		<fileset 
		dir="${project.dir.lib}" 
		includes="jaxws-tools.jar,jaxb-impl.jar,streambuffer.jar,stax-ex.jar"/>
	</path>

	<!-- consente l'utilizzo di tag come if, for ecc. -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" />
	<taskdef name="wsimport" classname="com.sun.tools.ws.ant.WsImport" classpathref="wsimport.classpath"/>

	<target name="generate-ws-classes" depends="init,clean-all">
		<echo message="generating classes for EPaywsoBusinessService.wsdl"/>
		<wsimport
			sourcedestdir="${project.dir.src}/generated/java"
			wsdl="${project.dir.src}/resources/wsdl/EPaywsoBusinessService.wsdl"
			xnocompile="true">
			<binding dir="${project.dir.src}/resources/wsdl" 
			includes="EPaywsoBusinessService.xjb,EPaywsoBusinessServiceTypes.xjb,EPaywsoCommonTypes.xjb,EPaywsoConfigTypes.xjb"/>
		</wsimport>
		<echo message="generating classes for EPaywsoCallbackService.wsdl"/>
		<wsimport
			sourcedestdir="${project.dir.src}/generated/java"
			wsdl="${project.dir.src}/resources/wsdl/EPaywsoCallbackService.wsdl"
			xnocompile="true">
			<binding dir="${project.dir.src}/resources/wsdl" 
			includes="EPaywsoCallbackService.xjb,EPaywsoCallbackServiceTypes.xjb,EPaywsoCommonTypes.xjb"/>
		</wsimport>
	</target>

	<target name="clean-all" >
		<echo message="Clean all"/>
		<delete dir="${project.dir.build.classes}/*" />
		<delete dir="${project.dir.build.tmp}/*" />
		<delete dir="${project.dir.build.archives}/*" />
		<delete dir="${project.dir.dist.target}/*" />
		<delete dir="${project.dir.build.javadoc}/*" />
		<delete dir="${project.dir.build.cache}/*" />
		<delete dir="${project.dir.src}/generated/java/*" failonerror="false"/>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: init                                              # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="init" description="Inizializza lo script Ant.">
		<property environment="env" />

		<tstamp>
			<format property="current_time" pattern="dd/MM/yyyy HH.mm.ss SSS" />
		</tstamp>

		<condition property="target" value="dev">
			<equals arg1="${target}" arg2="$${target}" />
		</condition>

		<delete dir="${project.dir.build.classes}" failonerror="false" />
		<delete dir="${project.dir.build.tmp}/${target}" failonerror="false" />
		<delete dir="${project.dir.build.archives}/${target}" failonerror="false" />
		<delete dir="${project.dir.dist.target}" failonerror="false" />

		<mkdir dir="${project.dir.dist.target}" />
		<mkdir dir="${project.dir.build}" />
		<mkdir dir="${project.dir.build.classes}" />
		<mkdir dir="${project.dir.build.tmp}/${target}/${project.lib}" />
		<mkdir dir="${project.dir.build.archives}/${target}" />
		<mkdir dir="${project.dir.build.javadoc}" />
		<mkdir dir="${project.dir.build.cache}" />
		<mkdir dir="${project.dir.src}/generated/java"/>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: default                                           # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="default" description="Eseguire il build per l'environment specificato a linea di comando con -Dtarget=${target} o per tutti gli environment (se non specificato).">
		<condition property="first-call" value="distribution">
			<not>
				<equals arg1="${target}" arg2="$${target}" />
			</not>
		</condition>

		<condition property="first-call" value="all-targets">
			<equals arg1="${target}" arg2="$${target}" />
		</condition>

		<echo message="target: ${server}" />
		<echo message="target: ${target}" />
		<echo message="first-call: ${first-call}" />

		<antcall target="${first-call}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: environment-recreate                              # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="environment-recreate">
		<mkdir dir="${project.dir.build.tmp}/${target}/conf" />
		<copy todir="${project.dir.build.tmp}/${target}/conf" overwrite="true">
			<fileset dir="${project.dir.conf}" />
		</copy>
		<if>
			<and>
				<equals arg1="${project.test-callbackservice.include}" arg2="false" />
			</and>
			<then>
				<xslt 
					basedir="${project.dir.build.tmp.conf.ear}/${project.component}/META-INF" 
					in="${project.dir.build.tmp.conf.ear}/${project.component}/META-INF/application.xml" 
					out="${project.dir.build.tmp.conf.ear}/${project.component}/META-INF/application.xml.out" 
					style="buildfiles/remove-epaywsosrv-test-callbackservice.xsl"/>
				<rename 
					src="${project.dir.build.tmp.conf.ear}/${project.component}/META-INF/application.xml.out" 
					dest="${project.dir.build.tmp.conf.ear}/${project.component}/META-INF/application.xml" />
			</then>
		</if>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: compile-all                                       # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="compile-all" depends="init,load-ivy,environment-recreate,environment-config,generate-ws-classes" description="Compila tutti i sorgenti.">
		<echo message="===> Target: ${target}" />
		<javac srcdir="${project.dir.src.generated}" 
			   destdir="${project.dir.build.classes}" 
			   deprecation="on" 
			   debug="true" 
			   debuglevel="lines,vars,source" 
			   optimize="true" 
			   compiler="modern"
			   source="1.8"
			   target="1.8"
			   fork="yes"
			   encoding="utf-8">
			<classpath refid="library.ref" />
		</javac>
		<javac srcdir="${project.dir.src.java}" 
			   destdir="${project.dir.build.classes}" 
			   deprecation="on" 
			   debug="true" 
			   debuglevel="lines,vars,source" 
			   optimize="true" 
			   compiler="modern" 
			   source="1.8"
			   target="1.8"
			   fork="yes"
			   encoding="utf-8">
			<classpath refid="library.ref" />
		</javac>

		<copy todir="${project.dir.build.classes}">
			<fileset dir="${project.dir.src.java}" excludes="**/*.java*,**/*.jbx*" />
		</copy>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: about                                             # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="about" description="Visualizza l'elenco dei target pubblici dello script.">
		<loadproperties srcfile="buildfiles/build.properties" />
		<loadfile property="about" srcfile="buildfiles/about.txt" />
		<echo message="${about}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: about-custom                                      # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="about-custom" description="Visualizza l'elenco di tutti i target, pubblici e privati (equivalente a 'ant -projecthelp')">
		<loadproperties srcfile="buildfiles/build.properties" />
		<loadfile property="about-custom" srcfile="buildfiles/about-custom.txt" />
		<echo message="${about-custom}" />
		<java classname="org.apache.tools.ant.Main">
			<arg value="-projecthelp" />
		</java>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [DISTRIB]: all-targets                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="all-targets" description="Esegue il build per le varie distribuzioni in sequenza.">
		<antcall target="distribution" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [DISTRIB]: distribution                                   # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="distribution" depends="package-ear" description="Costruisce il tar per la distribuzione.">
		<echo message="====== Creating distribution for ${target} ..." />

		<!--copy todir="${project.dir.build.archives}/${target}">
			<fileset file="${project.dir.build.tmp.conf}/epaywso-ds.xml" />
		</copy-->

		<echo message="====== Basedir: ${project.dir.build.archives}/${target} ..." />
		<tar tarfile="${project.dir.dist}/${target}/${project.tar.name}-${project.version}.tar" 
			 basedir="${project.dir.build.archives}/${target}" includes="*.ear,*.xml" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [DISTRIB]: deploy on local jboss                          # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="deploy-on-target" description="esegue il deploy sul jboss di destinazione tramite scp" depends="package-ear">
		<scp
		    file="${project.dir.build}/archives/${target}/${project.component}.ear" 
        	todir="${deploy.username}@${deploy.host.node1}:${deploy.path}" 
        	password="${deploy.password}" 
        	trust="yes" />
	</target>

    <!-- -->
	<!-- ############################################################# -->
	<!-- # [DISTRIB]: deploy on cluster jboss                        # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="deploy-on-cluster" description="esegue il deploy sul cluster jboss di destinazione tramite scp" depends="package-ear">
		<scp
		    file="${project.dir.build}/archives/${target}/${project.component}.ear" 
        	todir="${deploy.username}@${deploy.host.node1}:${deploy.path.node1}" 
        	password="${deploy.password}" 
        	trust="yes" />
		<scp
		    file="${project.dir.build}/archives/${target}/${project.component}.ear" 
        	todir="${deploy.username}@${deploy.host.node2}:${deploy.path.node2}" 
        	password="${deploy.password}" 
        	trust="yes" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [IVY]: init-ivy                                           # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="init-ivy">
		<!--path id="ivy.lib.path">
			<fileset dir="${env.IVY_VERSION}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
		<taskdef name="ivy-configure" classname="org.apache.ivy.ant.IvyConfigure" />
		<taskdef name="ivy-resolve" classname="org.apache.ivy.ant.IvyResolve" />
		<taskdef name="ivy-retrieve" classname="org.apache.ivy.ant.IvyRetrieve" /-->
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [IVY]: load-ivy                                           # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="load-ivy">
		<condition property="target.ivy.task" value="skip-dependencies" else="load-dependencies">
			<equals arg1="${target.disable.ivy}" arg2="true" />
		</condition>
		<echo message="target.disable.ivy: ${target.disable.ivy}" />
		<antcall target="${target.ivy.task}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [IVY]: skip-dependencies                                  # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="skip-dependencies">
		<echo message="skipping ivy dependency resolution..." />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [IVY]: resolve-dependencies                               # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="resolve-dependencies" depends="init-ivy" description="carica le librerie dal repository remoto">
		<ivy:configure file="${basedir}/buildfiles/ivyconf.xml" />
		<ivy:resolve file="${basedir}/buildfiles/ivy.xml" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [IVY]: internal target: load-dependencies                 # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="load-dependencies" depends="resolve-dependencies">
		<ivy:retrieve pattern="lib/[artifact].[type]" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: environment-config                                # -->
	<!-- #         Gestire qui i replace delle variabile d'ambiente  # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="environment-config" description="Predispone le configurazioni dipendenti dall'ambiente.">
		<!-- replace file="${project.dir.build.tmp.conf}/epaywso-ds.xml" token="@@CONNECTION_URL@@" value="${db.connection.url}"/>
		<replace file="${project.dir.build.tmp.conf}/epaywso-ds.xml" token="@@USERNAME@@" value="${db.username}"/>
		<replace file="${project.dir.build.tmp.conf}/epaywso-ds.xml" token="@@PASSWORD@@" value="${db.password}"/-->
		
		<replace file="${project.dir.build.tmp.conf}/ear/${project.component}/META-INF/application.xml" token="@@EAR_NAME@@" value="${project.ear.name}"/>
		<replace file="${project.dir.build.tmp.conf}/ear/${project.component}/META-INF/application.xml" token="@@JAR_NAME@@" value="${project.jar.name}"/>
		<replace file="${project.dir.build.tmp.conf}/ear/${project.component}/META-INF/application.xml" token="@@JARTESTCALLBACK_NAME@@" value="${project.testcallback.jar.name}"/>
		<replace file="${project.dir.build.tmp.conf}/ejb/business/${project.component}/META-INF/monitoring.xml" token="@@ACTIVEMQ_URL@@" value="${activemq.url}"/>
		<replace file="${project.dir.build.tmp.conf}/ejb/business/${project.component}/META-INF/monitoring.xml" token="@@ACTIVEMQ_URL@@" value="${activemq.url}"/>
		<replace file="${project.dir.build.tmp.conf}/ejb/business/${project.component}/META-INF/monitoring.xml" token="@@ACTIVEMQ_USER@@" value="${activemq.user}"/>
		<replace file="${project.dir.build.tmp.conf}/ejb/business/${project.component}/META-INF/monitoring.xml" token="@@ACTIVEMQ_PASSWORD@@" value="${activemq.password}"/>
		<replace file="${project.dir.build.tmp.conf}/ejb/business/${project.component}/META-INF/monitoring.xml" token="@@TIMER_CRON_EXPRESSION@@" value="${timer.cron.expression}"/>
		<replace file="${project.dir.build.tmp.conf}/ejb/business/${project.component}-test-callbackservice/META-INF/EPaywsoCallbackService.xml" token="@@ABSOLUTEPATH_TO_HOME@@" value="${absolutepath.home}"/>
	</target>
	
	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-ear                                        # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-ear" depends="business-ejb-jar, commons-jar, integration-callbackservice-jar, test-callbackservice-jar" description="costruisce l&apos;ear">
		<copy todir="${project.dir.build.tmp}/${target}/${project.lib}">
			<fileset dir="${project.dir.lib}" includes="${project.ear-libs-filter}" />
		</copy>

		<move file="${project.dir.build.archives}/${target}/commons.jar" tofile="${project.dir.build.tmp}/${target}/${project.lib}/commons.jar" />

		<if>
			<equals arg1="${project.test-callbackservice.include}" arg2="true" />
			<then>
				<move file="${project.dir.build.archives}/${target}/${project.component}-integration-callbackservice.jar" tofile="${project.dir.build.tmp}/${target}/${project.lib}/${project.component}-integration-callbackservice.jar" />
			</then>
		</if>
	
		<ear appxml="${project.dir.build.tmp}/${target}/conf/ear/${project.component}/META-INF/application.xml" destfile="${project.dir.build}/archives/${target}/${project.component}.ear">
			<fileset dir="${project.dir.build.archives}/${target}" includes="*.jar,*.war" />

			<fileset dir="${project.dir.build.archives}" includes="${project.component}ws.war" />

			<fileset dir="${project.dir.build.tmp}/${target}">
				<include name="${project.lib}/*" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${DSTAMP}" />
				<attribute name="Target" value="${target}" />
				<attribute name="Appl-Verison" value="${version}" />
			</manifest>
		</ear>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: commons-jar                                        # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="commons-jar" depends="compile-all" description="Genera il jar per le classi comuni.">
		<jar destfile="${project.dir.build.archives}/${target}/commons.jar" basedir="${project.dir.build.classes}" 
			includes="it/${project.organization}/${project.product}/${project.component}/dto/**,
			          it/${project.organization}/${project.product}/${project.component}/enumeration/**,
                      it/${project.organization}/${project.product}/${project.component}/exception/**,
			          it/${project.organization}/${project.product}/${project.component}/util/**">
		</jar>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: business-ejb-jar                                   # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="business-ejb-jar" depends="compile-all" description="Genera il jar per lo strato business.">
		<!-- JAR -->
		<jar jarfile="${project.dir.build.archives}/${target}/${project.jar.name}.jar" basedir="${project.dir.build.classes}" 
			includes="it/${project.organization}/${project.product}/${project.component}/business/**/*.*,
			          it/${project.organization}/${project.product}/${project.component}/dto/**/*.*,
                      it/${project.organization}/${project.product}/${project.component}/facade/**/*.*,
					  it/${project.organization}/${project.product}/${project.component}/schedule/**/*.*,
	        		  it/${project.organization}/${project.product}/${project.component}/persistence/**/*.*"
			excludes="it/${project.organization}/${project.product}/${project.component}/facade/service/*_Service.class">
			<metainf dir="${project.dir.build.tmp}/${target}/conf/ejb/business/${project.component}/META-INF">
				<patternset id="all-xml">
					<include name="**/*.xml" />
					<include name="**/*.xsd" />
					<include name="templates/*"/>
				</patternset>
			</metainf>
		</jar>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: integration-callbackservice-jar                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="integration-callbackservice-jar" depends="compile-all" description="Genera il jar della callbackservice (fake) per lo strato integration.">
		<if>
			<and>
				<equals arg1="${project.test-callbackservice.include}" arg2="true" />
			</and>
			<then>
				<jar jarfile="${project.dir.build.archives}/${target}/${project.component}-integration-callbackservice.jar">
					<fileset dir="${project.dir.build.classes}">
						<include name="it/${project.organization}/${project.product}/${project.component}/integration/callbackservice/**" />
					</fileset>
				</jar>
			</then>
		</if>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: test-callbackservice-jar                           # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="test-callbackservice-jar" depends="compile-all" description="Genera il jar della callbackservice (fake).">
		<if>
			<and>
				<equals arg1="${project.test-callbackservice.include}" arg2="true" />
			</and>
			<then>
				<jar jarfile="${project.dir.build.archives}/${target}/${project.component}-test-callbackservice.jar">
					<metainf dir="${project.dir.build.tmp}/${target}/conf/ejb/business/${project.component}-test-callbackservice/META-INF/">
						<patternset id="all-xml">
							<include name="**/*.xml" />
						</patternset>
					</metainf>
					<fileset dir="${project.dir.build.classes}">
						<include name="it/${project.organization}/${project.product}/${project.component}/test/integration/callbackservice/**" />
					</fileset>
				</jar>
			</then>
		</if>
	</target>

</project>
