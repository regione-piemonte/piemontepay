/*
* SPDX-FileCopyrightText: (C) Copyright 2023 Regione Piemonte
*
* SPDX-License-Identifier: EUPL-1.2 */

package it.csi.epay.epaypacatalogsrv.integration.stubs.richiediapplicationid;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 2.4.6
 * 2020-03-24T18:32:10.088+01:00
 * Generated source version: 2.4.6
 * 
 */
@WebServiceClient(name = "RichiediApplicationId", 
                  wsdlLocation = "http://localhost:8081/mdpcoopapplicativa/RichiediApplicationId?wsdl",
                  targetNamespace = "http://www.csi.it/epay/epaywso/richiediapplicationid") 
public class RichiediApplicationId_Service extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.csi.it/epay/epaywso/richiediapplicationid", "RichiediApplicationId");
    public final static QName RichiediApplicationId = new QName("http://www.csi.it/epay/epaywso/richiediapplicationid", "RichiediApplicationId");
    static {
        URL url = null;
        try {
            url = new URL("http://localhost:8081/mdpcoopapplicativa/RichiediApplicationId?wsdl");
        } catch (MalformedURLException e) {
			Logger log = LogManager.getLogger(RichiediApplicationId_Service.class.getName());
                log.info( "Can not initialize the default wsdl from http://localhost:8081/mdpcoopapplicativa/RichiediApplicationId?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public RichiediApplicationId_Service(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public RichiediApplicationId_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public RichiediApplicationId_Service() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public RichiediApplicationId_Service(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public RichiediApplicationId_Service(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public RichiediApplicationId_Service(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns RichiediApplicationId
     */
    @WebEndpoint(name = "RichiediApplicationId")
    public RichiediApplicationId getRichiediApplicationId() {
        return super.getPort(RichiediApplicationId, RichiediApplicationId.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns RichiediApplicationId
     */
    @WebEndpoint(name = "RichiediApplicationId")
    public RichiediApplicationId getRichiediApplicationId(WebServiceFeature... features) {
        return super.getPort(RichiediApplicationId, RichiediApplicationId.class, features);
    }

}
